// üö® VERS√ÉO CORRIGIDA DA FUN√á√ÉO QUE CAUSA LOOP
// Substitui√ß√£o segura para detectarEConfigurarTooltipUnificado

// Esta fun√ß√£o substitui temporariamente a vers√£o problem√°tica
function detectarEConfigurarTooltipUnificado_SEGURA() {
    console.log("üîç TOOLTIP SEGURO: Iniciando detec√ß√£o sem loops");

    try {
        // XPath direto sem chamadas recursivas
        const xpath =
            "/html/body/div[2]/div[3]/div[2]/div/div[1]/form[2]/div[3]/div/div/fieldset[6]/div/div[2]/div/fieldset/legend/span[1]";
        const resultado = document.evaluate(
            xpath,
            document,
            null,
            XPathResult.FIRST_ORDERED_NODE_TYPE,
            null
        );

        if (!resultado.singleNodeValue) {
            console.log("‚ÑπÔ∏è TOOLTIP: Elemento n√£o encontrado via XPath");
            return null;
        }

        const elemento = resultado.singleNodeValue;
        const textoCompleto = elemento.textContent || elemento.innerText || "";

        if (!textoCompleto.trim()) {
            console.log("‚ÑπÔ∏è TOOLTIP: Elemento encontrado mas sem texto");
            return null;
        }

        console.log(`üìù TOOLTIP: Texto detectado: "${textoCompleto}"`);

        // Detec√ß√£o simples de m√∫ltiplas sess√µes
        const padraoMultiplasSessoes = /\b\d{1,2}\/\d{1,2}\/\d{4}\b/g;
        const datasEncontradas = textoCompleto.match(padraoMultiplasSessoes);

        let dadosProcessados = null;

        if (datasEncontradas && datasEncontradas.length > 1) {
            console.log(
                `üéØ TOOLTIP: M√∫ltiplas sess√µes detectadas (${datasEncontradas.length})`
            );

            dadosProcessados = {
                tipo: "multiplas_sessoes",
                totalSessoes: datasEncontradas.length,
                datas: datasEncontradas,
                textoCompleto: textoCompleto,
                temTooltip: true,
                tooltipTipo: "rico",
                statusPrincipal: "M√∫ltiplas Sess√µes",
                dataFormatada: `${datasEncontradas.length} sess√µes`,
            };
        } else if (datasEncontradas && datasEncontradas.length === 1) {
            const dataUnica = datasEncontradas[0];
            console.log(`üìÖ TOOLTIP: Sess√£o √∫nica detectada: ${dataUnica}`);

            dadosProcessados = {
                tipo: "sessao_unica",
                totalSessoes: 1,
                datas: [dataUnica],
                textoCompleto: textoCompleto,
                temTooltip: true,
                tooltipTipo: "simples",
                statusPrincipal: "Pautado",
                dataFormatada: dataUnica,
            };
        } else {
            console.log("‚ÑπÔ∏è TOOLTIP: Nenhuma data de sess√£o v√°lida encontrada");
            return null;
        }

        console.log("‚úÖ TOOLTIP: Detec√ß√£o segura conclu√≠da:", dadosProcessados);
        return dadosProcessados;
    } catch (error) {
        console.error("‚ùå TOOLTIP: Erro na detec√ß√£o segura:", error);
        return null;
    }
}

// Substituir fun√ß√£o problem√°tica se existir
if (typeof window.SENT1_AUTO === "object" && window.SENT1_AUTO) {
    window.SENT1_AUTO.detectarEConfigurarTooltipUnificado =
        detectarEConfigurarTooltipUnificado_SEGURA;
    console.log(
        "‚úÖ CORRE√á√ÉO: Fun√ß√£o problem√°tica substitu√≠da por vers√£o segura"
    );
}

console.log("üîß CORRE√á√ÉO: Arquivo de corre√ß√£o carregado com sucesso");
