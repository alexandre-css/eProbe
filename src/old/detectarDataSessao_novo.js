// =====================================================================
// FUN√á√ÉO DE DETEC√á√ÉO DE DATA DA SESS√ÉO - eProbe
// =====================================================================
// Esta fun√ß√£o detecta a data da sess√£o no eProc e armazena na vari√°vel global
// dataSessaoPautado para uso posterior na extens√£o.
// =====================================================================

(function () {
    "use strict";

    // Vari√°vel global para armazenar a data da sess√£o (deve estar definida no main.js)
    // let dataSessaoPautado = null;

    // Fun√ß√£o principal de detec√ß√£o da data da sess√£o
    function detectarDataSessao() {
        console.log("üîç DETEC√á√ÉO SESS√ÉO: Fun√ß√£o detectarDataSessao() iniciada");

        // NAVEGA√á√ÉO HIER√ÅRQUICA PELA ESTRUTURA DOM DO eProc
        console.log(
            "üéØ DETEC√á√ÉO SESS√ÉO: Navegando pela hierarquia DOM espec√≠fica do eProc"
        );

        // PASSO 1: Encontrar divInfraAreaTelaD
        console.log("üìç PASSO 1: Procurando <div id='divInfraAreaTelaD'>");
        const divInfraAreaTelaD = document.querySelector("#divInfraAreaTelaD");

        if (!divInfraAreaTelaD) {
            console.log("‚ùå ERRO PASSO 1: divInfraAreaTelaD n√£o encontrado");
            return {
                encontrada: false,
                motivo: "Elemento #divInfraAreaTelaD n√£o encontrado - p√°gina incompat√≠vel",
                passo: 1,
            };
        }
        console.log("‚úÖ PASSO 1: divInfraAreaTelaD encontrado");

        // PASSO 2: Encontrar frmProcessoLista dentro da √°rea
        console.log(
            "üìç PASSO 2: Procurando <form id='frmProcessoLista'> dentro de divInfraAreaTelaD"
        );
        const frmProcessoLista =
            divInfraAreaTelaD.querySelector("#frmProcessoLista");

        if (!frmProcessoLista) {
            console.log(
                "‚ùå ERRO PASSO 2: frmProcessoLista n√£o encontrado dentro de divInfraAreaTelaD"
            );
            return {
                encontrada: false,
                motivo: "Elemento #frmProcessoLista n√£o encontrado na √°rea principal",
                passo: 2,
            };
        }
        console.log("‚úÖ PASSO 2: frmProcessoLista encontrado");

        // PASSO 3: Encontrar fieldset fldMinutas (DIRETO no formul√°rio, SEM fldCapa)
        console.log(
            "üìç PASSO 3: Procurando <fieldset id='fldMinutas'> dentro do formul√°rio"
        );
        const fldMinutas = frmProcessoLista.querySelector("#fldMinutas");

        if (!fldMinutas) {
            console.log(
                "‚ùå ERRO PASSO 3: fldMinutas n√£o encontrado dentro do formul√°rio"
            );
            return {
                encontrada: false,
                motivo: "Elemento #fldMinutas n√£o encontrado no formul√°rio",
                passo: 3,
            };
        }
        console.log("‚úÖ PASSO 3: fldMinutas encontrado");

        // PASSO 4: Encontrar div conteudoMinutas
        console.log(
            "üìç PASSO 4: Procurando <div id='conteudoMinutas'> dentro de fldMinutas"
        );
        const conteudoMinutas = fldMinutas.querySelector("#conteudoMinutas");

        if (!conteudoMinutas) {
            console.log(
                "‚ùå ERRO PASSO 4: conteudoMinutas n√£o encontrado dentro de fldMinutas"
            );
            return {
                encontrada: false,
                motivo: "Elemento #conteudoMinutas n√£o encontrado nas minutas",
                passo: 4,
            };
        }
        console.log("‚úÖ PASSO 4: conteudoMinutas encontrado");

        // PASSO 5: Encontrar legend com aria-label="Hist√≥rico"
        console.log(
            "üìç PASSO 5: Procurando <legend aria-label='Hist√≥rico' id='legMinutas'> dentro de conteudoMinutas"
        );
        const legMinutas = conteudoMinutas.querySelector(
            "legend[aria-label='Hist√≥rico']#legMinutas"
        );

        if (!legMinutas) {
            console.log(
                "‚ùå ERRO PASSO 5: legend com aria-label='Hist√≥rico' e id='legMinutas' n√£o encontrado dentro de conteudoMinutas"
            );
            return {
                encontrada: false,
                motivo: "Elemento legend[aria-label='Hist√≥rico']#legMinutas n√£o encontrado no conte√∫do das minutas",
                passo: 5,
            };
        }
        console.log("‚úÖ PASSO 5: legend com aria-label='Hist√≥rico' encontrado");

        // PASSO 6: Encontrar bot√£o com class="infraLegendObrigatorio" dentro da legend
        console.log(
            "üìç PASSO 6: Procurando <button class='infraLegendObrigatorio'> dentro da legend"
        );
        const botaoInfraLegend = legMinutas.querySelector(
            "button.infraLegendObrigatorio"
        );

        if (!botaoInfraLegend) {
            console.log(
                "‚ùå ERRO PASSO 6: bot√£o com class='infraLegendObrigatorio' n√£o encontrado dentro da legend"
            );
            return {
                encontrada: false,
                motivo: "Elemento button.infraLegendObrigatorio n√£o encontrado na legend",
                passo: 6,
            };
        }

        console.log(
            "üéâ PASSO 6: BOT√ÉO infraLegendObrigatorio ENCONTRADO! NAVEGA√á√ÉO COMPLETA!"
        );
        console.log("üìã DETEC√á√ÉO SESS√ÉO: Detalhes do elemento encontrado:");
        console.log("  ‚Ä¢ Tag:", botaoInfraLegend.tagName);
        console.log("  ‚Ä¢ Classes:", botaoInfraLegend.className || "nenhuma");
        console.log(
            "  ‚Ä¢ Texto vis√≠vel:",
            (botaoInfraLegend.textContent || "").substring(0, 200) + "..."
        );

        // Verificar todos os atributos
        const attrs = botaoInfraLegend.attributes;
        console.log(`  ‚Ä¢ Total de atributos: ${attrs.length}`);
        for (let i = 0; i < attrs.length; i++) {
            const attr = attrs[i];
            console.log(
                `    - ${attr.name}: ${attr.value.substring(0, 100)}${
                    attr.value.length > 100 ? "..." : ""
                }`
            );
        }

        // AGORA QUE ENCONTRAMOS O BOT√ÉO, BUSCAR O TEXTO DA DATA NA REGI√ÉO PR√ìXIMA
        console.log(
            "üéØ DETEC√á√ÉO SESS√ÉO: PRIORIDADE 2 - Buscar texto 'M√©rito (Inclu√≠do em Pauta em' na regi√£o pr√≥xima"
        );

        // ESTRAT√âGIA 1: Verificar se o texto est√° no pr√≥prio bot√£o
        const textoBotao =
            botaoInfraLegend.textContent || botaoInfraLegend.innerText || "";
        console.log(`üìã DETEC√á√ÉO SESS√ÉO: Texto do bot√£o: "${textoBotao}"`);

        // ESTRAT√âGIA 2: Buscar na legend pai e elementos pr√≥ximos
        let textoParaBusca = "";
        let fonteUsada = "";

        if (textoBotao.includes("M√©rito (Inclu√≠do em Pauta em")) {
            console.log(
                "‚úÖ DETEC√á√ÉO SESS√ÉO: Texto encontrado diretamente no bot√£o"
            );
            textoParaBusca = textoBotao.trim();
            fonteUsada = "button.textContent";
        } else {
            console.log(
                "üîç DETEC√á√ÉO SESS√ÉO: Texto n√£o est√° no bot√£o, buscando na regi√£o pr√≥xima..."
            );

            // Buscar na legend pai
            const textoLegend =
                legMinutas.textContent || legMinutas.innerText || "";
            console.log(
                `üìã DETEC√á√ÉO SESS√ÉO: Texto da legend: "${textoLegend.substring(
                    0,
                    200
                )}${textoLegend.length > 200 ? "..." : ""}"`
            );

            if (textoLegend.includes("M√©rito (Inclu√≠do em Pauta em")) {
                console.log(
                    "‚úÖ DETEC√á√ÉO SESS√ÉO: Texto encontrado na legend pai"
                );
                textoParaBusca = textoLegend.trim();
                fonteUsada = "legend.textContent";
            } else {
                // Buscar no fieldset pai (fldMinutas)
                const textoFieldset =
                    fldMinutas.textContent || fldMinutas.innerText || "";
                console.log(
                    `üìã DETEC√á√ÉO SESS√ÉO: Texto do fieldset: "${textoFieldset.substring(
                        0,
                        200
                    )}${textoFieldset.length > 200 ? "..." : ""}"`
                );

                if (textoFieldset.includes("M√©rito (Inclu√≠do em Pauta em")) {
                    console.log(
                        "‚úÖ DETEC√á√ÉO SESS√ÉO: Texto encontrado no fieldset pai"
                    );
                    textoParaBusca = textoFieldset.trim();
                    fonteUsada = "fieldset.textContent";
                } else {
                    // Buscar no div conteudoMinutas
                    const textoConteudo =
                        conteudoMinutas.textContent ||
                        conteudoMinutas.innerText ||
                        "";
                    console.log(
                        `üìã DETEC√á√ÉO SESS√ÉO: Texto do conte√∫do: "${textoConteudo.substring(
                            0,
                            200
                        )}${textoConteudo.length > 200 ? "..." : ""}"`
                    );

                    if (
                        textoConteudo.includes("M√©rito (Inclu√≠do em Pauta em")
                    ) {
                        console.log(
                            "‚úÖ DETEC√á√ÉO SESS√ÉO: Texto encontrado no div conteudoMinutas"
                        );
                        textoParaBusca = textoConteudo.trim();
                        fonteUsada = "conteudoMinutas.textContent";
                    }
                }
            }
        }

        // FALLBACK: Se n√£o encontrou o texto espec√≠fico, tentar fontes do bot√£o
        if (!textoParaBusca && textoBotao.trim().length > 0) {
            console.log(
                "üîÑ DETEC√á√ÉO SESS√ÉO: Fallback - usando texto do bot√£o mesmo sem padr√£o espec√≠fico"
            );
            textoParaBusca = textoBotao.trim();
            fonteUsada = "button.textContent.fallback";
        } else if (!textoParaBusca) {
            console.log(
                "‚ùå DETEC√á√ÉO SESS√ÉO: ERRO - Nenhum texto encontrado para an√°lise"
            );
            return {
                encontrada: false,
                motivo: "Nenhum texto encontrado nas regi√µes pr√≥ximas ao bot√£o infraLegendObrigatorio",
                passo: 7,
            };
        }

        console.log(
            `üéØ DETEC√á√ÉO SESS√ÉO: Usando fonte "${fonteUsada}" para busca de data`
        );
        console.log(
            `üìã DETEC√á√ÉO SESS√ÉO: Texto para an√°lise: "${textoParaBusca}"`
        );

        // AN√ÅLISE DE PADR√ïES DE DATA
        console.log(
            "üîç DETEC√á√ÉO SESS√ÉO: Iniciando an√°lise de padr√µes de data..."
        );

        // Padr√µes espec√≠ficos para datas em portugu√™s (incluindo contexto de pauta)
        const padroesBrasil = [
            /(?:em|Em)\s+(\d{1,2}\/\d{1,2}\/\d{4})/g, // "em 15/07/2025"
            /(?:Pauta|pauta)\s+(?:em|Em)\s+(\d{1,2}\/\d{1,2}\/\d{4})/g, // "Pauta em 15/07/2025"
            /(?:Inclu√≠do|inclu√≠do)\s+(?:em|Em)\s+(?:Pauta|pauta)\s+(?:em|Em)\s+(\d{1,2}\/\d{1,2}\/\d{4})/g, // "Inclu√≠do em Pauta em 15/07/2025"
            /\d{1,2}\/\d{1,2}\/\d{4}/g, // "15/07/2025" (direto)
            /\d{1,2}-\d{1,2}-\d{4}/g, // "15-07-2025"
            /\d{1,2}\.\d{1,2}\.\d{4}/g, // "15.07.2025"
        ];

        let datasEncontradas = [];

        padroesBrasil.forEach((padrao, index) => {
            console.log(
                `üîç DETEC√á√ÉO SESS√ÉO: Testando padr√£o ${index + 1}: ${
                    padrao.source
                }`
            );

            // Reset do lastIndex para garantir busca do in√≠cio
            padrao.lastIndex = 0;
            let match;

            while ((match = padrao.exec(textoParaBusca)) !== null) {
                const dataEncontrada = match[1] || match[0]; // Captura grupo ou match completo
                console.log(
                    `üìÖ DETEC√á√ÉO SESS√ÉO: Data encontrada com padr√£o ${
                        index + 1
                    }: "${dataEncontrada}"`
                );

                // Validar se √© uma data v√°lida
                const dataValidada = validarDataBrasileira(dataEncontrada);
                if (dataValidada) {
                    datasEncontradas.push({
                        original: dataEncontrada,
                        validada: dataValidada,
                        padrao: index + 1,
                        fonte: fonteUsada,
                    });
                    console.log(
                        `‚úÖ DETEC√á√ÉO SESS√ÉO: Data v√°lida adicionada: ${dataValidada.dataFormatada}`
                    );
                } else {
                    console.log(
                        `‚ùå DETEC√á√ÉO SESS√ÉO: Data inv√°lida rejeitada: "${dataEncontrada}"`
                    );
                }
            }
        });

        if (datasEncontradas.length === 0) {
            console.log(
                "‚ùå DETEC√á√ÉO SESS√ÉO: ERRO - Nenhuma data v√°lida encontrada no texto"
            );
            return {
                encontrada: false,
                motivo: "Nenhuma data v√°lida encontrada no texto analisado",
                passo: 8,
                textoAnalisado: textoParaBusca.substring(0, 200),
                fonte: fonteUsada,
            };
        } else {
            console.log(
                `üìÖ DETEC√á√ÉO SESS√ÉO: ${datasEncontradas.length} data(s) v√°lida(s) encontrada(s)`
            );

            // Se h√° m√∫ltiplas datas, escolher a mais recente e v√°lida
            let dataSelecionada;

            if (datasEncontradas.length === 1) {
                dataSelecionada = datasEncontradas[0].validada;
                console.log(
                    "üìÖ DETEC√á√ÉO SESS√ÉO: Apenas uma data v√°lida, selecionando automaticamente"
                );
            } else {
                console.log(
                    "üìÖ DETEC√á√ÉO SESS√ÉO: M√∫ltiplas datas encontradas, selecionando a mais recente..."
                );

                // Ordenar por timestamp (mais recente primeiro)
                datasEncontradas.sort(
                    (a, b) => b.validada.timestamp - a.validada.timestamp
                );
                dataSelecionada = datasEncontradas[0].validada;

                console.log(
                    `üìÖ DETEC√á√ÉO SESS√ÉO: Data mais recente selecionada: ${dataSelecionada.dataFormatada}`
                );

                // Log de todas as datas para debug
                datasEncontradas.forEach((item, idx) => {
                    console.log(
                        `  ${idx + 1}. ${item.validada.dataFormatada} (padr√£o ${
                            item.padrao
                        }, fonte: ${item.fonte})`
                    );
                });
            }

            // ARMAZENAR NA VARI√ÅVEL GLOBAL
            if (typeof window.dataSessaoPautado !== "undefined") {
                window.dataSessaoPautado = dataSelecionada;
                console.log(
                    "‚úÖ DETEC√á√ÉO SESS√ÉO: Data armazenada na vari√°vel global window.dataSessaoPautado"
                );
            } else if (typeof dataSessaoPautado !== "undefined") {
                dataSessaoPautado = dataSelecionada;
                console.log(
                    "‚úÖ DETEC√á√ÉO SESS√ÉO: Data armazenada na vari√°vel global dataSessaoPautado"
                );
            } else {
                // Criar a vari√°vel se n√£o existir
                window.dataSessaoPautado = dataSelecionada;
                console.log(
                    "‚úÖ DETEC√á√ÉO SESS√ÉO: Vari√°vel global criada e data armazenada em window.dataSessaoPautado"
                );
            }

            console.log(
                "üéâ DETEC√á√ÉO SESS√ÉO: SUCESSO! Data da sess√£o detectada e armazenada:"
            );
            console.log(`  üìÖ Data Original: ${dataSelecionada.dataOriginal}`);
            console.log(
                `  üìÖ Data Formatada: ${dataSelecionada.dataFormatada}`
            );
            console.log(`  üìÖ Dia: ${dataSelecionada.dia}`);
            console.log(`  üìÖ M√™s: ${dataSelecionada.mes}`);
            console.log(`  üìÖ Ano: ${dataSelecionada.ano}`);
            console.log(`  üìÖ Timestamp: ${dataSelecionada.timestamp}`);

            return {
                encontrada: true,
                data: dataSelecionada,
                totalDatasEncontradas: datasEncontradas.length,
                fonte: fonteUsada,
                textoAnalisado: textoParaBusca.substring(0, 200),
            };
        }
    }

    // Fun√ß√£o auxiliar para validar data brasileira
    function validarDataBrasileira(dataString) {
        console.log(`üìÖ VALIDA√á√ÉO: Validando data "${dataString}"`);

        // Limpar e normalizar a string da data
        const dataLimpa = dataString.trim().replace(/[^\d\/\-\.]/g, "");
        console.log(`üìÖ VALIDA√á√ÉO: Data limpa: "${dataLimpa}"`);

        // Tentar diferentes separadores
        const separadores = ["/", "-", "."];
        let partesData = null;
        let separadorUsado = "";

        for (const sep of separadores) {
            if (dataLimpa.includes(sep)) {
                partesData = dataLimpa.split(sep);
                separadorUsado = sep;
                break;
            }
        }

        if (!partesData || partesData.length !== 3) {
            console.log(
                `‚ùå VALIDA√á√ÉO: Formato inv√°lido - esperado 3 partes separadas por ${separadores.join(
                    ", "
                )}`
            );
            return null;
        }

        // Assumir formato brasileiro: DD/MM/AAAA
        const dia = parseInt(partesData[0], 10);
        const mes = parseInt(partesData[1], 10);
        const ano = parseInt(partesData[2], 10);

        console.log(
            `üìÖ VALIDA√á√ÉO: Partes extra√≠das - Dia: ${dia}, M√™s: ${mes}, Ano: ${ano}`
        );

        // Valida√ß√µes b√°sicas
        if (isNaN(dia) || isNaN(mes) || isNaN(ano)) {
            console.log("‚ùå VALIDA√á√ÉO: Partes n√£o s√£o n√∫meros v√°lidos");
            return null;
        }

        if (dia < 1 || dia > 31) {
            console.log(
                `‚ùå VALIDA√á√ÉO: Dia inv√°lido: ${dia} (deve estar entre 1 e 31)`
            );
            return null;
        }

        if (mes < 1 || mes > 12) {
            console.log(
                `‚ùå VALIDA√á√ÉO: M√™s inv√°lido: ${mes} (deve estar entre 1 e 12)`
            );
            return null;
        }

        if (ano < 2020 || ano > 2030) {
            console.log(
                `‚ùå VALIDA√á√ÉO: Ano inv√°lido: ${ano} (deve estar entre 2020 e 2030)`
            );
            return null;
        }

        // Criar objeto Date para valida√ß√£o mais rigorosa
        const dataObj = new Date(ano, mes - 1, dia); // mes-1 porque Date usa 0-based months

        if (
            dataObj.getFullYear() !== ano ||
            dataObj.getMonth() !== mes - 1 ||
            dataObj.getDate() !== dia
        ) {
            console.log(
                `‚ùå VALIDA√á√ÉO: Data inexistente no calend√°rio: ${dia}/${mes}/${ano}`
            );
            return null;
        }

        console.log(
            `‚úÖ VALIDA√á√ÉO: Data v√°lida confirmada: ${dia}/${mes}/${ano}`
        );

        // Criar objeto de retorno com informa√ß√µes estruturadas
        const dataValidada = {
            dataOriginal: dataString,
            dataFormatada: `${dia.toString().padStart(2, "0")}/${mes
                .toString()
                .padStart(2, "0")}/${ano}`,
            dia: dia,
            mes: mes,
            ano: ano,
            timestamp: dataObj.getTime(),
            dataObj: dataObj,
        };

        console.log(`‚úÖ VALIDA√á√ÉO: Objeto de data criado:`, dataValidada);
        return dataValidada;
    }

    // Fun√ß√µes utilit√°rias para acessar a data da sess√£o
    function getDataSessaoPautado() {
        return window.dataSessaoPautado || dataSessaoPautado || null;
    }

    function hasDataSessaoPautado() {
        const data = getDataSessaoPautado();
        return data !== null && data !== undefined;
    }

    function resetDataSessaoPautado() {
        if (typeof window.dataSessaoPautado !== "undefined") {
            window.dataSessaoPautado = null;
        }
        if (typeof dataSessaoPautado !== "undefined") {
            dataSessaoPautado = null;
        }
        console.log("üîÑ DETEC√á√ÉO SESS√ÉO: Vari√°vel global resetada");
    }

    function showDataSessaoPautadoInfo() {
        const data = getDataSessaoPautado();
        if (data) {
            console.log("üìÖ INFO DATA SESS√ÉO:");
            console.log(`  ‚Ä¢ Data Original: ${data.dataOriginal}`);
            console.log(`  ‚Ä¢ Data Formatada: ${data.dataFormatada}`);
            console.log(`  ‚Ä¢ Dia: ${data.dia}`);
            console.log(`  ‚Ä¢ M√™s: ${data.mes}`);
            console.log(`  ‚Ä¢ Ano: ${data.ano}`);
            console.log(`  ‚Ä¢ Timestamp: ${data.timestamp}`);
            return data;
        } else {
            console.log("‚ùå INFO DATA SESS√ÉO: Nenhuma data detectada ainda");
            return null;
        }
    }

    // Exportar fun√ß√µes se estiver sendo usado como m√≥dulo
    if (typeof module !== "undefined" && module.exports) {
        module.exports = {
            detectarDataSessao,
            getDataSessaoPautado,
            hasDataSessaoPautado,
            resetDataSessaoPautado,
            showDataSessaoPautadoInfo,
            validarDataBrasileira,
        };
    }

    // Disponibilizar fun√ß√µes globalmente para teste
    window.detectarDataSessao = detectarDataSessao;
    window.getDataSessaoPautado = getDataSessaoPautado;
    window.hasDataSessaoPautado = hasDataSessaoPautado;
    window.resetDataSessaoPautado = resetDataSessaoPautado;
    window.showDataSessaoPautadoInfo = showDataSessaoPautadoInfo;

    console.log(
        "‚úÖ DETEC√á√ÉO SESS√ÉO: M√≥dulo carregado e fun√ß√µes disponibilizadas globalmente"
    );
})();
