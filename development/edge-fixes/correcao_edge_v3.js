// üîß CORRE√á√ÉO DEFINITIVA PARA MICROSOFT EDGE - VERS√ÉO 3.0
// Esta vers√£o tenta realmente RECRIAR o namespace completo

console.log("üîß CORRE√á√ÉO EDGE v3.0: Tentando recupera√ß√£o COMPLETA...");

// 1. Primeiro, verificar se algum namespace existe
console.log("üîç VERIFICANDO: Estado atual do namespace...");
console.log(
    "window.SENT1_AUTO existe?",
    typeof window.SENT1_AUTO !== "undefined"
);

// 2. Limpar qualquer namespace parcial
if (typeof window.SENT1_AUTO !== "undefined") {
    console.log("üóëÔ∏è LIMPANDO: Namespace parcial existente...");
    delete window.SENT1_AUTO;
}

// 3. Verificar se a extens√£o realmente carregou elementos
function verificarElementosExtensao() {
    const elementos = [
        document.getElementById("eprobe-data-sessao"),
        document.querySelector("#eprobe-theme-styles"),
        document.querySelector(".bootstrap-styles"),
        document.querySelector('[class*="eprobe"]'),
    ].filter((el) => el !== null);

    console.log(
        `üîç ELEMENTOS: ${elementos.length} elementos da extens√£o encontrados`
    );
    return elementos.length > 0;
}

// 4. Tentar for√ßar re-execu√ß√£o da IIFE principal
async function tentarReexecutarIIFE() {
    console.log("üîÑ TENTANDO: Re-executar IIFE principal...");

    // Verificar se h√° scripts da extens√£o
    const scripts = Array.from(document.querySelectorAll("script"));
    const scriptExtensao = scripts.find(
        (s) =>
            s.src &&
            (s.src.includes("main.js") ||
                s.src.includes("extension://") ||
                s.src.includes("eprobe"))
    );

    if (scriptExtensao) {
        console.log(`üìú SCRIPT: Encontrado em ${scriptExtensao.src}`);

        // Tentar recarregar o script
        try {
            const response = await fetch(scriptExtensao.src);
            const codigo = await response.text();

            console.log(`üìù C√ìDIGO: Carregado ${codigo.length} caracteres`);

            // Executar o c√≥digo em um contexto seguro
            const scriptElement = document.createElement("script");
            scriptElement.textContent = codigo;
            document.head.appendChild(scriptElement);

            console.log("‚úÖ SCRIPT: Re-executado com sucesso");

            // Aguardar um pouco para a execu√ß√£o
            await new Promise((resolve) => setTimeout(resolve, 2000));

            // Verificar se funcionou
            if (
                typeof window.SENT1_AUTO !== "undefined" &&
                typeof window.SENT1_AUTO.runFullAutomation === "function"
            ) {
                console.log("üéâ SUCESSO: Namespace completo recriado!");
                return true;
            }
        } catch (error) {
            console.log(
                "‚ùå ERRO: N√£o foi poss√≠vel recarregar script:",
                error.message
            );
        }
    }

    return false;
}

// 5. Criar namespace completo manualmente
function criarNamespaceCompletoManual() {
    console.log("üõ†Ô∏è CRIANDO: Namespace completo manualmente...");

    // Fun√ß√µes b√°sicas que sabemos que devem existir
    window.SENT1_AUTO = {
        // Status
        status: () => {
            console.log("üìä STATUS NAMESPACE MANUAL:");
            console.log("   Tipo: Manual/Reconstru√≠do");
            console.log(
                "   APIs extens√£o:",
                typeof chrome !== "undefined" && chrome.runtime
                    ? "DISPON√çVEIS"
                    : "N√ÉO DISPON√çVEIS"
            );
            console.log(
                "   Elementos:",
                document.querySelectorAll('[id*="eprobe"]').length
            );
            return { tipo: "manual", completo: false };
        },

        // Tentar detectar data da sess√£o manualmente
        detectarDataSessao: () => {
            console.log("üîç DETECTANDO: Data da sess√£o manualmente...");

            const textoCompleto = document.body.innerText;
            const padroes = [
                /(?:data\s*da\s*sess[a√£]o|sess[a√£]o\s*(?:de|em|para|:)?)\s*:?\s*(\d{1,2}\/\d{1,2}\/\d{4})/i,
                /(?:julgamento\s*(?:em|para|:)|para\s*julgamento)\s*:?\s*(\d{1,2}\/\d{1,2}\/\d{4})/i,
                /(?:pautado|agendar|agendado|marcado).*?(\d{1,2}\/\d{1,2}\/\d{4})/i,
            ];

            for (const padrao of padroes) {
                const match = textoCompleto.match(padrao);
                if (match) {
                    console.log(
                        `‚úÖ DATA ENCONTRADA: ${match[1]} (padr√£o: ${padrao})`
                    );
                    return match[1];
                }
            }

            console.log("‚ùå DATA: Nenhuma data de sess√£o encontrada");
            return null;
        },

        // Fun√ß√£o simulada de automa√ß√£o
        runFullAutomation: () => {
            console.log("ü§ñ AUTOMA√á√ÉO: Executando vers√£o manual...");
            console.log("‚ö†Ô∏è AVISO: Esta √© uma vers√£o limitada");
            console.log(
                "üí° SOLU√á√ÉO: Recarregue a extens√£o para vers√£o completa"
            );

            // Tentar detectar data
            const data = window.SENT1_AUTO.detectarDataSessao();
            if (data) {
                console.log(`üìÖ SESS√ÉO: Data detectada: ${data}`);
            }

            return { sucesso: false, motivo: "versao_manual" };
        },

        // Fun√ß√£o de ajuda
        ajuda: () => {
            console.log("üìö NAMESPACE MANUAL - COMANDOS DISPON√çVEIS:");
            console.log("   window.SENT1_AUTO.status() - Status atual");
            console.log(
                "   window.SENT1_AUTO.detectarDataSessao() - Detectar data"
            );
            console.log(
                "   window.SENT1_AUTO.runFullAutomation() - Automa√ß√£o b√°sica"
            );
            console.log(
                "   window.SENT1_AUTO.forcarRecarregamento() - Tentar recarregar"
            );
            console.log("");
            console.log("üîß PARA VERS√ÉO COMPLETA:");
            console.log("   1. edge://extensions/ ‚Üí Recarregar extens√£o");
            console.log("   2. Recarregar esta p√°gina");
        },

        // Tentar for√ßar recarregamento
        forcarRecarregamento: async () => {
            console.log("üîÑ FOR√áANDO: Recarregamento da extens√£o...");

            const sucesso = await tentarReexecutarIIFE();
            if (sucesso) {
                console.log("‚úÖ SUCESSO: Extens√£o recarregada!");
                return true;
            } else {
                console.log("‚ùå FALHA: N√£o foi poss√≠vel recarregar");
                console.log(
                    "üí° SOLU√á√ÉO: Recarregue manualmente em edge://extensions/"
                );
                return false;
            }
        },
    };

    // Proteger namespace
    Object.defineProperty(window, "SENT1_AUTO", {
        value: window.SENT1_AUTO,
        writable: false,
        configurable: false,
    });

    console.log("‚úÖ NAMESPACE: Criado manualmente com prote√ß√£o");
    return window.SENT1_AUTO;
}

// 6. Executar corre√ß√£o principal
async function executarCorrecaoDefinitiva() {
    console.log("üöÄ INICIANDO: Corre√ß√£o definitiva v3.0...");

    try {
        // Verificar elementos
        const temElementos = verificarElementosExtensao();

        if (!temElementos) {
            console.log("‚ùå PROBLEMA: Extens√£o n√£o criou elementos");
            console.log(
                "üí° SOLU√á√ÉO: Verifique se est√° ativada em edge://extensions/"
            );
            return false;
        }

        console.log("‚úÖ ELEMENTOS: Extens√£o funcionando");

        // Tentar re-executar IIFE
        console.log("üîÑ TENTANDO: Re-executar IIFE...");
        const iifeSuccesso = await tentarReexecutarIIFE();

        if (iifeSuccesso) {
            console.log("üéâ SUCESSO TOTAL: Namespace completo restaurado!");
            return true;
        }

        // Se falhou, criar vers√£o manual
        console.log("‚ö†Ô∏è FALLBACK: Criando namespace manual...");
        criarNamespaceCompletoManual();

        console.log("üìã PR√ìXIMOS PASSOS:");
        console.log("1. Teste: window.SENT1_AUTO.status()");
        console.log(
            "2. Para vers√£o completa: window.SENT1_AUTO.forcarRecarregamento()"
        );
        console.log("3. Ou recarregue a extens√£o manualmente");

        return true;
    } catch (error) {
        console.error("‚ùå ERRO FATAL:", error);
        return false;
    }
}

// 7. Executar corre√ß√£o
executarCorrecaoDefinitiva().then((sucesso) => {
    if (sucesso) {
        console.log("‚úÖ CORRE√á√ÉO v3.0: Conclu√≠da!");
        console.log("üß™ TESTE: window.SENT1_AUTO.status()");
    } else {
        console.log("‚ùå CORRE√á√ÉO v3.0: Falhou");
    }
});

console.log("‚è≥ AGUARDE: Corre√ß√£o v3.0 em andamento...");
