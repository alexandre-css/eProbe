// üîß CORRE√á√ÉO ROBUSTA PARA MICROSOFT EDGE - VERS√ÉO 2.0
// Execute este script no console para corrigir definitivamente o problema

console.log("üîß CORRE√á√ÉO EDGE v2.0: Aplicando corre√ß√£o robusta...");

// 1. Fun√ß√£o para criar namespace persistente
function criarNamespacePersistente() {
    // Verificar se j√° existe e est√° completo
    if (
        typeof window.SENT1_AUTO !== "undefined" &&
        typeof window.SENT1_AUTO.runFullAutomation === "function"
    ) {
        console.log("‚úÖ NAMESPACE: J√° existe e est√° completo");
        return window.SENT1_AUTO;
    }

    // Criar namespace robusto
    window.SENT1_AUTO = {
        // Status atual
        status: () => {
            const apisDisponiveis =
                typeof chrome !== "undefined" && chrome.runtime;
            const elementosEncontrados =
                document.querySelectorAll('[id*="eprobe"]').length;
            const namespaceCompleto =
                typeof window.SENT1_AUTO.runFullAutomation === "function";

            console.log("üìä STATUS ATUAL:");
            console.log(
                `   APIs de extens√£o: ${
                    apisDisponiveis ? "DISPON√çVEIS" : "N√ÉO DISPON√çVEIS"
                }`
            );
            console.log(`   Elementos na p√°gina: ${elementosEncontrados}`);
            console.log(
                `   Namespace completo: ${
                    namespaceCompleto ? "SIM" : "N√ÉO (tempor√°rio)"
                }`
            );
            console.log(`   URL atual: ${window.location.href}`);

            return {
                apis: apisDisponiveis,
                elementos: elementosEncontrados,
                completo: namespaceCompleto,
                versao: "temporario-v2.0",
            };
        },

        // Verificar se extens√£o est√° funcionando
        verificarExtensao: () => {
            const elementos = [
                document.getElementById("eprobe-data-sessao"),
                document.querySelector("#eprobe-theme-styles"),
                document.querySelector(".bootstrap-styles"),
                document.querySelector('[class*="eprobe"]'),
            ].filter((el) => el !== null);

            console.log(
                `üîç EXTENS√ÉO: ${elementos.length} elementos encontrados`
            );

            if (elementos.length > 0) {
                console.log("‚úÖ EXTENS√ÉO: Funcionando (elementos criados)");
                elementos.forEach((el, i) => {
                    console.log(
                        `   Elemento ${i + 1}: ${el.tagName}${
                            el.id ? "#" + el.id : ""
                        }${
                            el.className ? "." + el.className.split(" ")[0] : ""
                        }`
                    );
                });
                return true;
            } else {
                console.log(
                    "‚ùå EXTENS√ÉO: N√£o funcionando (nenhum elemento encontrado)"
                );
                return false;
            }
        },

        // Tentar recuperar namespace completo
        recuperarNamespace: async () => {
            console.log(
                "üîÑ RECUPERA√á√ÉO: Tentando recuperar namespace completo..."
            );

            // Verificar se main.js carregou
            const scripts = Array.from(document.querySelectorAll("script"));
            const mainScript = scripts.find(
                (s) => s.src && s.src.includes("main.js")
            );

            if (mainScript) {
                console.log(`üìú MAIN.JS: Encontrado em ${mainScript.src}`);
            } else {
                console.log("‚ùå MAIN.JS: N√£o encontrado");
                return false;
            }

            // Aguardar APIs ficarem dispon√≠veis
            console.log("‚è≥ AGUARDANDO: APIs de extens√£o...");
            let tentativas = 0;

            while (tentativas < 30) {
                if (
                    typeof chrome !== "undefined" &&
                    chrome.runtime &&
                    chrome.runtime.id
                ) {
                    console.log(`‚úÖ APIS: Dispon√≠veis ap√≥s ${tentativas}s`);
                    break;
                }
                await new Promise((resolve) => setTimeout(resolve, 1000));
                tentativas++;
            }

            if (tentativas >= 30) {
                console.log("‚ö†Ô∏è APIS: Timeout - continuando sem elas");
            }

            // Sugerir recarregamento
            console.log("üí° SUGEST√ÉO: Para namespace completo:");
            console.log("   1. V√° para edge://extensions/");
            console.log("   2. Recarregue a extens√£o eProbe");
            console.log("   3. Volte aqui e recarregue a p√°gina");

            return false;
        },

        // Diagn√≥stico r√°pido
        diagnostico: () => {
            console.log("üîç DIAGN√ìSTICO R√ÅPIDO:");

            // Verificar navegador
            const isEdge = navigator.userAgent.includes("Edg/");
            console.log(`   Navegador: ${isEdge ? "Microsoft Edge" : "Outro"}`);

            // Verificar URL
            const isEproc = window.location.href.includes("eproc");
            console.log(`   P√°gina eProc: ${isEproc ? "SIM" : "N√ÉO"}`);

            // Verificar extens√£o
            const extensaoFuncionando = window.SENT1_AUTO.verificarExtensao();

            // Verificar APIs
            const apisDisponiveis =
                typeof chrome !== "undefined" && chrome.runtime;
            console.log(
                `   APIs extens√£o: ${
                    apisDisponiveis ? "DISPON√çVEIS" : "N√ÉO DISPON√çVEIS"
                }`
            );

            // Conclus√£o
            if (extensaoFuncionando && !apisDisponiveis) {
                console.log(
                    "üéØ CONCLUS√ÉO: Extens√£o funciona mas APIs n√£o dispon√≠veis"
                );
                console.log("üí° SOLU√á√ÉO: Recarregue a extens√£o");
            } else if (!extensaoFuncionando) {
                console.log("üéØ CONCLUS√ÉO: Extens√£o n√£o est√° funcionando");
                console.log(
                    "üí° SOLU√á√ÉO: Verifique se est√° ativada em edge://extensions/"
                );
            } else {
                console.log("üéØ CONCLUS√ÉO: Tudo funcionando normalmente");
            }

            return {
                navegador: isEdge ? "edge" : "outro",
                eproc: isEproc,
                extensao: extensaoFuncionando,
                apis: apisDisponiveis,
            };
        },

        // Ajuda r√°pida
        ajuda: () => {
            console.log("üìö AJUDA R√ÅPIDA:");
            console.log("   window.SENT1_AUTO.status() - Verificar status");
            console.log(
                "   window.SENT1_AUTO.diagnostico() - Diagn√≥stico completo"
            );
            console.log(
                "   window.SENT1_AUTO.verificarExtensao() - Verificar se extens√£o funciona"
            );
            console.log(
                "   window.SENT1_AUTO.recuperarNamespace() - Tentar recuperar fun√ß√µes"
            );
            console.log("");
            console.log("üîß SOLU√á√ÉO PRINCIPAL:");
            console.log(
                "   1. edge://extensions/ ‚Üí Recarregar extens√£o eProbe"
            );
            console.log("   2. Voltar aqui e recarregar p√°gina (F5)");
            console.log("   3. Testar: window.SENT1_AUTO.runFullAutomation()");
        },
    };

    // Tentar preservar namespace
    Object.defineProperty(window, "SENT1_AUTO", {
        value: window.SENT1_AUTO,
        writable: true,
        configurable: false, // Mais dif√≠cil de ser removido
    });

    console.log("‚úÖ NAMESPACE: Criado com prote√ß√£o contra remo√ß√£o");
    return window.SENT1_AUTO;
}

// 2. Aplicar corre√ß√£o imediatamente
function aplicarCorrecaoRobusta() {
    console.log("üöÄ APLICANDO: Corre√ß√£o robusta v2.0...");

    try {
        // Criar namespace
        const namespace = criarNamespacePersistente();

        // Executar diagn√≥stico automaticamente
        const diagnostico = namespace.diagnostico();

        // Dar instru√ß√µes baseadas no diagn√≥stico
        console.log("\nüìã PR√ìXIMOS PASSOS RECOMENDADOS:");

        if (diagnostico.extensao && !diagnostico.apis) {
            console.log("1. ‚úÖ Extens√£o funcionando mas APIs n√£o dispon√≠veis");
            console.log(
                "2. üîß SOLU√á√ÉO: Recarregue a extens√£o em edge://extensions/"
            );
            console.log("3. üîÑ Depois recarregue esta p√°gina");
        } else if (!diagnostico.extensao) {
            console.log("1. ‚ùå Extens√£o n√£o est√° funcionando");
            console.log(
                "2. üîß SOLU√á√ÉO: Ative a extens√£o em edge://extensions/"
            );
            console.log("3. üîÑ Depois recarregue esta p√°gina");
        } else {
            console.log("1. ‚úÖ Tudo funcionando normalmente");
            console.log("2. üß™ Teste: window.SENT1_AUTO.runFullAutomation()");
        }

        console.log("\nüí° COMANDOS √öTEIS:");
        console.log("   window.SENT1_AUTO.ajuda() - Ver todos os comandos");
        console.log("   window.SENT1_AUTO.status() - Status atual");
    } catch (error) {
        console.error("‚ùå ERRO NA CORRE√á√ÉO:", error);
    }
}

// 3. Executar corre√ß√£o
aplicarCorrecaoRobusta();

// 4. Criar monitoramento inteligente
let monitor = setInterval(() => {
    // Verificar se namespace completo apareceu
    if (
        typeof window.SENT1_AUTO !== "undefined" &&
        typeof window.SENT1_AUTO.runFullAutomation === "function"
    ) {
        console.log("üéâ SUCESSO: Namespace completo detectado!");
        console.log("‚úÖ Todas as fun√ß√µes agora dispon√≠veis!");
        clearInterval(monitor);

        // Testar fun√ß√£o principal
        try {
            console.log("üß™ TESTE: Testando fun√ß√£o principal...");
            window.SENT1_AUTO.status();
        } catch (error) {
            console.log("‚ö†Ô∏è TESTE: Erro ao testar fun√ß√£o:", error.message);
        }
    }
}, 2000);

// Limpar monitor ap√≥s 1 minuto
setTimeout(() => {
    clearInterval(monitor);
    console.log("‚è∞ MONITOR: Finalizado ap√≥s 1 minuto");
}, 60000);

console.log("üîß CORRE√á√ÉO v2.0: Aplicada com sucesso!");
console.log("üì± Use window.SENT1_AUTO.ajuda() para ver comandos dispon√≠veis");
