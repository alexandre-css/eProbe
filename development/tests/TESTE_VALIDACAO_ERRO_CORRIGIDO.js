// TESTE DE VALIDA√á√ÉO - ERRO INFRAABRIRFECHAR CORRIGIDO
// Copie e cole este c√≥digo no console do navegador na p√°gina do eProc

console.log(
    "üîß TESTE: Validando corre√ß√£o do erro infraAbrirFecharElementoHTML"
);

// 1. Verificar se as fun√ß√µes de seguran√ßa est√£o dispon√≠veis
if (typeof window.SENT1_AUTO !== "undefined") {
    console.log("‚úÖ Namespace SENT1_AUTO carregado");

    const funcoesSeguranca = [
        "isElementSafeForToggle",
        "findToggleTarget",
        "debugAlternanciaEproc",
    ];

    funcoesSeguranca.forEach((funcao) => {
        if (window.SENT1_AUTO[funcao]) {
            console.log(`‚úÖ Fun√ß√£o ${funcao} dispon√≠vel`);
        } else {
            console.log(`‚ùå Fun√ß√£o ${funcao} n√£o encontrada`);
        }
    });
} else {
    console.log("‚ùå Namespace SENT1_AUTO n√£o carregado");
}

// 2. Testar elementos com onclick problem√°tico
const elementosOnclick = document.querySelectorAll(
    '[onclick*="infraAbrirFecharElementoHTML"]'
);
console.log(
    `üîç Encontrados ${elementosOnclick.length} elementos com onclick infraAbrirFecharElementoHTML`
);

let elementosSegurosCont = 0;
let elementosInsegurosCont = 0;

elementosOnclick.forEach((element, index) => {
    console.log(`\nüìù Testando elemento ${index + 1}:`);
    console.log(`   onclick: ${element.getAttribute("onclick")}`);

    // Testar se o elemento √© seguro
    if (window.SENT1_AUTO && window.SENT1_AUTO.isElementSafeForToggle) {
        const img = element.querySelector("img") || element;
        const seguro = window.SENT1_AUTO.isElementSafeForToggle(img);

        if (seguro) {
            console.log(`   ‚úÖ Elemento SEGURO para processar`);
            elementosSegurosCont++;
        } else {
            console.log(`   ‚ö†Ô∏è Elemento INSEGURO - ser√° ignorado`);
            elementosInsegurosCont++;
        }
    } else {
        console.log(`   ‚ùì N√£o foi poss√≠vel testar seguran√ßa`);
    }

    // Extrair e verificar ID do elemento alvo
    const onclick = element.getAttribute("onclick");
    const match = onclick.match(
        /infraAbrirFecharElementoHTML\s*\(\s*['"]([^'"]+)['"](?:,\s*['"]([^'"]+)['"])?/
    );
    if (match) {
        const targetId = match[1];
        const targetElement = document.getElementById(targetId);
        console.log(`   üéØ Target ID: ${targetId}`);
        console.log(
            `   ${targetElement ? "‚úÖ" : "‚ùå"} Elemento alvo ${
                targetElement ? "EXISTE" : "N√ÉO EXISTE"
            }`
        );
    }
});

// 3. Verificar containers j√° processados
const containers = document.querySelectorAll("div[data-expanded]");
console.log(
    `\nüìä Encontrados ${containers.length} containers j√° processados pelo sistema`
);

// 4. Resumo final
console.log(`\nüìã RESUMO DO TESTE:`);
console.log(`   - Elementos com onclick: ${elementosOnclick.length}`);
console.log(`   - Elementos seguros: ${elementosSegurosCont}`);
console.log(`   - Elementos inseguros: ${elementosInsegurosCont}`);
console.log(`   - Containers processados: ${containers.length}`);

// 5. Teste de erro - simular clique em elemento seguro
if (elementosSegurosCont > 0) {
    console.log(
        `\nüß™ TESTE DE CLIQUE: Procurando elemento seguro para simular clique...`
    );

    const elementoSeguro = Array.from(elementosOnclick).find((element) => {
        const img = element.querySelector("img") || element;
        return (
            window.SENT1_AUTO &&
            window.SENT1_AUTO.isElementSafeForToggle &&
            window.SENT1_AUTO.isElementSafeForToggle(img)
        );
    });

    if (elementoSeguro) {
        console.log(
            `‚úÖ Elemento seguro encontrado. Clique manual pode ser testado.`
        );
        console.log(`   Elemento:`, elementoSeguro);
    }
} else {
    console.log(`\n‚ö†Ô∏è Nenhum elemento seguro encontrado para teste de clique`);
}

console.log("\nüèÅ TESTE FINALIZADO");
console.log("üìñ Se n√£o houver erros no console, a corre√ß√£o foi bem-sucedida!");
