// =============================================================================
// üéØ VALIDA√á√ÉO FINAL COMPLETA - Sistema eProbe v2.0
// =============================================================================
//
// Este script valida todas as implementa√ß√µes da itera√ß√£o atual:
// ‚úÖ Namespace SENT1_AUTO completo
// ‚úÖ Fun√ß√µes de diagn√≥stico e corre√ß√£o
// ‚úÖ Sistema de √≠cones melhorado
// ‚úÖ Verifica√ß√£o robusta de bot√µes
// ‚úÖ Execu√ß√£o autom√°tica confi√°vel
//
// EXECUTE EM UMA P√ÅGINA DO ePROC PARA VALIDA√á√ÉO COMPLETA
// =============================================================================

console.clear();
console.log("üéØ VALIDA√á√ÉO FINAL COMPLETA - Sistema eProbe v2.0");
console.log("=".repeat(70));
console.log("üìÖ Data:", new Date().toLocaleString("pt-BR"));
console.log("üåê URL:", window.location.href);

// =============================================================================
// üìã LISTA COMPLETA DE FUN√á√ïES ESPERADAS
// =============================================================================

const funcoesCriticas = {
    "Core Functions": [
        "runFullAutomation",
        "autoOpenDocumentoRelevante",
        "autoExtractText",
        "detectPageType",
        "findDocumentosRelevantes",
    ],
    "Session Detection": [
        "detectarDataSessao",
        "getDataSessaoPautado",
        "hasDataSessaoPautado",
        "resetDataSessaoPautado",
        "inserirDataSessaoNaInterface",
    ],
    "Button Management": [
        "ensureButtonExists",
        "forceCreateButton",
        "debugButtonCreation",
        "shouldShowIntegratedButton",
        "shouldShowFloatingButton",
    ],
    "Icon System": [
        "forcarReaplicacaoIcones",
        "inicializarSubstituicaoIcones",
        "diagnosticarIconesCSS",
    ],
    "Diagnostic & Correction": ["diagnosticarCompleto", "corrigirProblemas"],
    "Performance Control": [
        "ativarModoUltraPerformance",
        "desativarModoUltraPerformance",
        "statusModoUltraPerformance",
    ],
    "Debug Functions": [
        "debugDeteccaoDataSessao",
        "forcarDeteccaoDataSessao",
        "debugDeteccaoStatusSessao",
        "debugStatusCompleto",
    ],
};

async function validacaoCompleta() {
    console.log("\nüîç FASE 1: VALIDA√á√ÉO DO NAMESPACE");
    console.log("-".repeat(50));

    // Verificar se namespace existe
    if (typeof window.SENT1_AUTO !== "object") {
        console.log(
            "‚ùå FALHA CR√çTICA: Namespace window.SENT1_AUTO n√£o encontrado!"
        );
        return false;
    }

    console.log("‚úÖ Namespace SENT1_AUTO encontrado");

    // Contar fun√ß√µes dispon√≠veis
    const funcoesDisponiveis = Object.keys(window.SENT1_AUTO);
    console.log(
        `üìä Total de fun√ß√µes no namespace: ${funcoesDisponiveis.length}`
    );

    // Verificar cada categoria
    let totalEsperadas = 0;
    let totalEncontradas = 0;

    for (const [categoria, funcoes] of Object.entries(funcoesCriticas)) {
        console.log(`\nüìÇ ${categoria}:`);
        totalEsperadas += funcoes.length;

        let encontradasCategoria = 0;
        funcoes.forEach((funcao) => {
            const existe = typeof window.SENT1_AUTO[funcao] === "function";
            const status = existe ? "‚úÖ" : "‚ùå";
            console.log(`   ${status} ${funcao}`);

            if (existe) {
                encontradasCategoria++;
                totalEncontradas++;
            }
        });

        const percentual = (
            (encontradasCategoria / funcoes.length) *
            100
        ).toFixed(1);
        console.log(
            `   üìä ${categoria}: ${encontradasCategoria}/${funcoes.length} (${percentual}%)`
        );
    }

    const percentualTotal = ((totalEncontradas / totalEsperadas) * 100).toFixed(
        1
    );
    console.log(
        `\nüéØ TOTAL GERAL: ${totalEncontradas}/${totalEsperadas} (${percentualTotal}%)`
    );

    // =============================================================================
    // üß™ FASE 2: TESTE FUNCIONAL
    // =============================================================================

    console.log("\nüß™ FASE 2: TESTE FUNCIONAL");
    console.log("-".repeat(50));

    const resultadosTeste = {
        namespace: percentualTotal >= 90,
        diagnostico: false,
        correcao: false,
        icones: false,
        performance: false,
    };

    // Teste 1: Diagn√≥stico completo
    if (typeof window.SENT1_AUTO.diagnosticarCompleto === "function") {
        try {
            console.log("üîç Testando diagn√≥stico completo...");
            const diagnostico = window.SENT1_AUTO.diagnosticarCompleto();

            if (diagnostico && typeof diagnostico === "object") {
                console.log("‚úÖ Diagn√≥stico executado com sucesso");
                resultadosTeste.diagnostico = true;

                // Mostrar resumo do diagn√≥stico
                console.log("   üìä Resumo do diagn√≥stico:");
                if (diagnostico.funcionalidades) {
                    console.log(
                        `      - Data sess√£o: ${
                            diagnostico.funcionalidades.dataSessao?.detectada
                                ? "‚úÖ"
                                : "‚ùå"
                        }`
                    );
                    console.log(
                        `      - Bot√£o: ${
                            diagnostico.funcionalidades.botaoResumir?.existe
                                ? "‚úÖ"
                                : "‚ùå"
                        }`
                    );
                    console.log(
                        `      - √çcones: ${
                            diagnostico.funcionalidades.substituicaoIcones
                                ?.aplicada
                                ? "‚úÖ"
                                : "‚ùå"
                        }`
                    );
                }
            }
        } catch (error) {
            console.log("‚ùå Erro no diagn√≥stico:", error.message);
        }
    } else {
        console.log("‚ùå Fun√ß√£o diagnosticarCompleto n√£o dispon√≠vel");
    }

    // Teste 2: Sistema de corre√ß√£o
    if (typeof window.SENT1_AUTO.corrigirProblemas === "function") {
        try {
            console.log("üîß Testando sistema de corre√ß√£o...");
            const correcao = window.SENT1_AUTO.corrigirProblemas();

            if (correcao && typeof correcao === "object") {
                console.log("‚úÖ Corre√ß√£o executada com sucesso");
                resultadosTeste.correcao = true;

                if (correcao.acoes && correcao.acoes.length > 0) {
                    console.log(
                        `   üìä ${correcao.acoes.length} a√ß√µes de corre√ß√£o executadas`
                    );
                }
            }
        } catch (error) {
            console.log("‚ùå Erro na corre√ß√£o:", error.message);
        }
    } else {
        console.log("‚ùå Fun√ß√£o corrigirProblemas n√£o dispon√≠vel");
    }

    // Teste 3: Diagn√≥stico de √≠cones
    if (typeof window.SENT1_AUTO.diagnosticarIconesCSS === "function") {
        try {
            console.log("üé® Testando diagn√≥stico de √≠cones...");
            const diagnosticoIcones = window.SENT1_AUTO.diagnosticarIconesCSS();

            if (diagnosticoIcones && typeof diagnosticoIcones === "object") {
                console.log("‚úÖ Diagn√≥stico de √≠cones executado");
                resultadosTeste.icones = true;

                console.log(
                    `   üìä GIF: ${diagnosticoIcones.iconesGIF || 0}, SVG: ${
                        diagnosticoIcones.iconesSVG || 0
                    }`
                );
            }
        } catch (error) {
            console.log("‚ùå Erro no diagn√≥stico de √≠cones:", error.message);
        }
    } else {
        console.log("‚ùå Fun√ß√£o diagnosticarIconesCSS n√£o dispon√≠vel");
    }

    // Teste 4: Controle de performance
    if (typeof window.SENT1_AUTO.statusModoUltraPerformance === "function") {
        try {
            console.log("üî• Testando controle de performance...");
            const status = window.SENT1_AUTO.statusModoUltraPerformance();
            console.log(
                `‚úÖ Modo ultra-performance: ${status ? "ATIVO" : "INATIVO"}`
            );
            resultadosTeste.performance = true;
        } catch (error) {
            console.log("‚ùå Erro no controle de performance:", error.message);
        }
    } else {
        console.log("‚ùå Fun√ß√£o statusModoUltraPerformance n√£o dispon√≠vel");
    }

    // =============================================================================
    // üéØ FASE 3: VALIDA√á√ÉO DE ELEMENTOS DA P√ÅGINA
    // =============================================================================

    console.log("\nüéØ FASE 3: VALIDA√á√ÉO DE ELEMENTOS");
    console.log("-".repeat(50));

    // Verificar presen√ßa de bot√µes
    const botoesIds = [
        "eprobe-btn",
        "documento-relevante-auto-button",
        "sent1-auto-button",
    ];
    const botoesEncontrados = botoesIds.filter(
        (id) => document.getElementById(id) !== null
    );

    console.log(
        `üîò Bot√µes encontrados: ${botoesEncontrados.length}/${botoesIds.length}`
    );
    botoesEncontrados.forEach((id) => console.log(`   ‚úÖ ${id}`));

    // Verificar √≠cones substitu√≠dos
    const iconesSubstituidos = document.querySelectorAll(
        "[data-eprobe-icon-replaced]"
    );
    console.log(
        `üé® √çcones substitu√≠dos: ${iconesSubstituidos.length} elementos`
    );

    // Verificar fieldset de a√ß√µes
    const fieldsetAcoes = document.querySelector("#fldAcoes.infraFieldset");
    if (fieldsetAcoes) {
        const iconesGIF = fieldsetAcoes.querySelectorAll('img[src*=".gif"]');
        const iconesSVG = fieldsetAcoes.querySelectorAll("svg.lucide");
        console.log(
            `üéØ Fieldset a√ß√µes: ${iconesGIF.length} GIF, ${iconesSVG.length} SVG`
        );
    } else {
        console.log(
            "‚ÑπÔ∏è Fieldset de a√ß√µes n√£o encontrado (normal em algumas p√°ginas)"
        );
    }

    // =============================================================================
    // üìä FASE 4: PONTUA√á√ÉO FINAL E RECOMENDA√á√ïES
    // =============================================================================

    console.log("\nüìä FASE 4: AVALIA√á√ÉO FINAL");
    console.log("-".repeat(50));

    let pontuacaoFinal = 0;

    // Crit√©rios de pontua√ß√£o
    if (resultadosTeste.namespace) pontuacaoFinal += 30; // Namespace completo
    if (resultadosTeste.diagnostico) pontuacaoFinal += 20; // Diagn√≥stico funcionando
    if (resultadosTeste.correcao) pontuacaoFinal += 20; // Corre√ß√£o funcionando
    if (resultadosTeste.icones) pontuacaoFinal += 15; // √çcones funcionando
    if (resultadosTeste.performance) pontuacaoFinal += 10; // Performance funcionando
    if (botoesEncontrados.length > 0) pontuacaoFinal += 5; // Bot√µes presentes

    console.log(`üèÜ PONTUA√á√ÉO FINAL: ${pontuacaoFinal}/100`);

    // Determinar status
    let status, emoji, recomendacoes;

    if (pontuacaoFinal >= 90) {
        status = "EXCELENTE";
        emoji = "üéâ";
        recomendacoes = [
            "Sistema funcionando perfeitamente!",
            "Todas as funcionalidades est√£o operacionais",
            "Pronto para uso em produ√ß√£o",
        ];
    } else if (pontuacaoFinal >= 75) {
        status = "BOM";
        emoji = "‚úÖ";
        recomendacoes = [
            "Sistema funcionando bem com pequenos ajustes",
            "Funcionalidades principais operacionais",
            "Considere executar corre√ß√£o autom√°tica",
        ];
    } else if (pontuacaoFinal >= 60) {
        status = "REGULAR";
        emoji = "‚ö†Ô∏è";
        recomendacoes = [
            "Sistema parcialmente funcional",
            "Execute: window.SENT1_AUTO.corrigirProblemas()",
            "Recarregue a p√°gina se necess√°rio",
        ];
    } else {
        status = "CR√çTICO";
        emoji = "‚ùå";
        recomendacoes = [
            "Sistema com problemas graves",
            "Recarregue a p√°gina completamente",
            "Verifique se a extens√£o est√° carregada",
            "Execute diagn√≥stico manual",
        ];
    }

    console.log(`\n${emoji} STATUS: ${status}`);
    console.log("\nüí° RECOMENDA√á√ïES:");
    recomendacoes.forEach((rec) => console.log(`   ‚Ä¢ ${rec}`));

    // =============================================================================
    // üõ†Ô∏è COMANDOS √öTEIS
    // =============================================================================

    console.log("\nüõ†Ô∏è COMANDOS √öTEIS:");
    console.log("-".repeat(30));
    console.log("‚Ä¢ Diagn√≥stico: window.SENT1_AUTO.diagnosticarCompleto()");
    console.log("‚Ä¢ Corre√ß√£o: window.SENT1_AUTO.corrigirProblemas()");
    console.log("‚Ä¢ √çcones: window.SENT1_AUTO.forcarReaplicacaoIcones()");
    console.log(
        "‚Ä¢ Performance: window.SENT1_AUTO.statusModoUltraPerformance()"
    );
    console.log("‚Ä¢ Debug: window.SENT1_AUTO.debugDeteccaoDataSessao()");

    console.log("\n" + "=".repeat(70));
    console.log(`üéØ VALIDA√á√ÉO COMPLETA: ${status} (${pontuacaoFinal}/100)`);
    console.log("=".repeat(70));

    return pontuacaoFinal >= 75;
}

// Executar valida√ß√£o
console.log("\n‚è≥ Iniciando valida√ß√£o completa...");
validacaoCompleta().then((sucesso) => {
    console.log(
        `\nüèÅ RESULTADO FINAL: ${
            sucesso ? "APROVADO ‚úÖ" : "NECESSITA AJUSTES ‚ö†Ô∏è"
        }`
    );
});
