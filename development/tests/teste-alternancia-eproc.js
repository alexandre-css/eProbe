// Teste para verificar se o sistema de altern√¢ncia est√° funcionando com o eProc
// Execute este c√≥digo no console do navegador na p√°gina do eProc

console.log("üß™ TESTE: Iniciando teste de altern√¢ncia no eProc");

// 1. Verificar se as fun√ß√µes existem
console.log("‚úÖ Verificando namespace:", typeof window.SENT1_AUTO);
console.log("‚úÖ Verificando findToggleTarget:", typeof findToggleTarget);

// 2. Buscar elementos com IDs espec√≠ficos das minutas
const minutasIds = [
    "conteudoInternoMinutas_0",
    "conteudoInternoMinutas_1",
    "conteudoInternoMinutas_2",
    "conteudoInternoMinutas_3",
];

console.log("üîç Procurando elementos de minutas:");
minutasIds.forEach((id) => {
    const element = document.getElementById(id);
    if (element) {
        console.log(`‚úÖ Encontrado: ${id}`, element);
        console.log(`   - Display: ${element.style.display}`);
        console.log(`   - Visible: ${element.offsetParent !== null}`);
    } else {
        console.log(`‚ùå N√£o encontrado: ${id}`);
    }
});

// 3. Buscar elementos com onclick contendo infraAbrirFecharElementoHTML
console.log(
    "üîç Procurando elementos com onclick infraAbrirFecharElementoHTML:"
);
const elementsWithOnclick = document.querySelectorAll(
    '[onclick*="infraAbrirFecharElementoHTML"]'
);
console.log(
    `üìä Encontrados ${elementsWithOnclick.length} elementos com onclick`
);

elementsWithOnclick.forEach((element, index) => {
    console.log(`${index + 1}. Elemento:`, element);
    console.log(`   - onclick: ${element.getAttribute("onclick")}`);

    // Extrair o ID do onclick
    const onclick = element.getAttribute("onclick");
    const match = onclick.match(
        /infraAbrirFecharElementoHTML\s*\(\s*['"]([^'"]+)['"](?:,\s*['"]([^'"]+)['"])?/
    );
    if (match) {
        const targetId = match[1];
        const imageId = match[2];
        console.log(`   - Target ID: ${targetId}`);
        console.log(`   - Image ID: ${imageId}`);

        // Verificar se o elemento alvo existe
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
            console.log(`   ‚úÖ Elemento alvo encontrado:`, targetElement);
        } else {
            console.log(`   ‚ùå Elemento alvo n√£o encontrado: ${targetId}`);
        }
    }
});

// 4. Buscar imagens de mais/menos que foram substitu√≠das
console.log("üîç Procurando containers de √≠cones substitu√≠dos:");
const containers = document.querySelectorAll("div[data-expanded]");
console.log(`üìä Encontrados ${containers.length} containers com data-expanded`);

containers.forEach((container, index) => {
    console.log(`${index + 1}. Container:`, container);
    console.log(
        `   - data-expanded: ${container.getAttribute("data-expanded")}`
    );
    console.log(`   - Conte√∫do:`, container.innerHTML);
});

// 5. Teste manual de findToggleTarget
if (typeof findToggleTarget === "function") {
    console.log("üß™ Teste manual de findToggleTarget:");
    elementsWithOnclick.forEach((element, index) => {
        console.log(`Testando elemento ${index + 1}:`);
        try {
            const target = findToggleTarget(element);
            if (target) {
                console.log(`   ‚úÖ Target encontrado:`, target);
                console.log(`   - ID: ${target.id}`);
                console.log(`   - Display: ${target.style.display}`);
            } else {
                console.log(`   ‚ùå Target n√£o encontrado`);
            }
        } catch (error) {
            console.log(`   ‚ö†Ô∏è Erro:`, error);
        }
    });
} else {
    console.log("‚ùå Fun√ß√£o findToggleTarget n√£o encontrada");
}

console.log("üèÅ TESTE: Finalizado");
