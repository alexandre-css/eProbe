// =============================================================================
// üîç TESTE DE DIAGN√ìSTICO E CORRE√á√ÉO AUTOM√ÅTICA - VERS√ÉO FINAL
// =============================================================================
//
// Este script testa as novas fun√ß√µes de diagn√≥stico e corre√ß√£o autom√°tica
// que foram adicionadas ao sistema para resolver os problemas de execu√ß√£o inconsistente.
//
// COMO USAR:
// 1. Abra uma p√°gina do eProc
// 2. Copie e cole este c√≥digo no console
// 3. Execute step by step ou rode tudo de uma vez
//
// =============================================================================

console.log("üöÄ TESTE: Iniciando teste de diagn√≥stico e corre√ß√£o autom√°tica");

// PASSO 1: Verificar se as fun√ß√µes existem no namespace
console.log("\nüì¶ PASSO 1: Verificando disponibilidade das fun√ß√µes...");

const funcoesTeste = [
    "diagnosticarCompleto",
    "corrigirProblemas",
    "ensureButtonExists",
    "substituirIconesFieldsetAcoes",
];

funcoesTeste.forEach((funcao) => {
    const existe = typeof window.SENT1_AUTO?.[funcao] === "function";
    console.log(
        `   ${existe ? "‚úÖ" : "‚ùå"} ${funcao}: ${
            existe ? "DISPON√çVEL" : "N√ÉO ENCONTRADA"
        }`
    );
});

// PASSO 2: Executar diagn√≥stico completo
console.log("\nüîç PASSO 2: Executando diagn√≥stico completo...");

let diagnostico = null;
try {
    if (typeof window.SENT1_AUTO?.diagnosticarCompleto === "function") {
        diagnostico = window.SENT1_AUTO.diagnosticarCompleto();
        console.log("‚úÖ Diagn√≥stico executado com sucesso");
    } else {
        console.log("‚ùå Fun√ß√£o diagnosticarCompleto n√£o dispon√≠vel");
    }
} catch (error) {
    console.error("‚ùå Erro no diagn√≥stico:", error);
}

// PASSO 3: Executar corre√ß√£o autom√°tica
console.log("\nüîß PASSO 3: Executando corre√ß√£o autom√°tica...");

let correcao = null;
try {
    if (typeof window.SENT1_AUTO?.corrigirProblemas === "function") {
        correcao = window.SENT1_AUTO.corrigirProblemas();
        console.log("‚úÖ Corre√ß√£o executada com sucesso");
    } else {
        console.log("‚ùå Fun√ß√£o corrigirProblemas n√£o dispon√≠vel");
    }
} catch (error) {
    console.error("‚ùå Erro na corre√ß√£o:", error);
}

// PASSO 4: Verificar se os problemas foram resolvidos
console.log("\nüéØ PASSO 4: Verificando resultados ap√≥s corre√ß√£o...");

setTimeout(() => {
    // Verificar bot√£o
    const botaoExiste = document.getElementById("eprobe-btn") !== null;
    console.log(
        `   üîò Bot√£o "Resumir Documento": ${
            botaoExiste ? "‚úÖ PRESENTE" : "‚ùå AUSENTE"
        }`
    );

    // Verificar √≠cones substitu√≠dos
    const iconesSubstituidos = document.querySelectorAll(
        "[data-eprobe-icon-replaced]"
    ).length;
    console.log(`   üé® √çcones substitu√≠dos: ${iconesSubstituidos} elementos`);

    // Verificar namespace
    const namespaceFunciona = typeof window.SENT1_AUTO === "object";
    console.log(
        `   üì¶ Namespace SENT1_AUTO: ${
            namespaceFunciona ? "‚úÖ FUNCIONANDO" : "‚ùå INDISPON√çVEL"
        }`
    );

    // Resumo final
    console.log("\nüìä RESUMO FINAL:");
    console.log("================");
    if (diagnostico) {
        console.log("üîç Diagn√≥stico:", diagnostico);
    }
    if (correcao) {
        console.log("üîß Corre√ß√£o:", correcao);
    }

    const problemas = [];
    if (!botaoExiste) problemas.push("Bot√£o ausente");
    if (iconesSubstituidos === 0) problemas.push("√çcones n√£o substitu√≠dos");
    if (!namespaceFunciona) problemas.push("Namespace indispon√≠vel");

    if (problemas.length === 0) {
        console.log("üéâ SUCESSO: Todos os componentes est√£o funcionando!");
    } else {
        console.log(`‚ö†Ô∏è PROBLEMAS PENDENTES: ${problemas.join(", ")}`);
    }
}, 2000);

console.log("\n‚è≥ Aguardando 2 segundos para verificar resultados...");
