// üß™ DEMONSTRA√á√ÉO DO AUTO IMPORT CONFIGURADO PARA EPROBE
// Copiar e colar no console do navegador (p√°gina eProc) para testar

console.log("üöÄ TESTANDO CONFIGURA√á√ÉO AUTO IMPORT EPROBE");

// ========================================
// 1. TESTE DE DETEC√á√ÉO DE FUN√á√ÉO DISPON√çVEL
// ========================================
console.log("\n1. üîç Testando detec√ß√£o de fun√ß√µes do namespace...");

// Ao digitar 'window.SENT1_AUTO.' no VS Code, Auto Import mostrar√°:
// - autoExtractText
// - autoOpenDocumentoRelevante
// - runFullAutomation
// - detectarDataSessao
// - etc...

// ========================================
// 2. TESTE DE DETEC√á√ÉO DE VARI√ÅVEL N√ÉO DECLARADA
// ========================================
console.log("\n2. ‚ö†Ô∏è Testando detec√ß√£o de ReferenceError...");

// No VS Code, se voc√™ digitar uma vari√°vel sem declarar:
// if (variavelNaoDeclarada) { ... }  // ‚ùå Error Lens destacar√° em vermelho

// Auto Import sugerir√° declarar:
let variavelNaoDeclarada = false; // ‚úÖ Sugest√£o do Auto Import

// ========================================
// 3. TESTE DE FUN√á√ÉO DO NAMESPACE
// ========================================
console.log("\n3. üéØ Testando acesso √†s fun√ß√µes do namespace...");

// Fun√ß√£o que estava causando ReferenceError (agora corrigida)
try {
    if (window.SENT1_AUTO && window.SENT1_AUTO.processoJaFoiProcessado) {
        const resultado =
            window.SENT1_AUTO.processoJaFoiProcessado("123456789");
        console.log("‚úÖ processoJaFoiProcessado funcionou:", resultado);
    } else {
        console.log("‚ùå processoJaFoiProcessado n√£o encontrada no namespace");
    }
} catch (error) {
    console.log("‚ùå ReferenceError ainda existe:", error.message);
}

// ========================================
// 4. TESTE DE AUTOCOMPLETE DE FUN√á√ïES
// ========================================
console.log("\n4. üîß Listando fun√ß√µes dispon√≠veis no namespace...");

if (window.SENT1_AUTO) {
    const funcoes = Object.keys(window.SENT1_AUTO);
    console.log(`üìä Total de fun√ß√µes no namespace: ${funcoes.length}`);

    // Mostrar algumas fun√ß√µes importantes
    const funcoesImportantes = [
        "runFullAutomation",
        "autoExtractText",
        "detectarDataSessao",
        "processoJaFoiProcessado",
        "ensureButtonExists",
    ];

    funcoesImportantes.forEach((funcao) => {
        if (funcoes.includes(funcao)) {
            console.log(`‚úÖ ${funcao} - dispon√≠vel`);
        } else {
            console.log(`‚ùå ${funcao} - FALTANDO no namespace`);
        }
    });
} else {
    console.log("‚ùå window.SENT1_AUTO n√£o encontrado");
}

// ========================================
// 5. DEMONSTRA√á√ÉO DE SNIPPETS PERSONALIZADOS
// ========================================
console.log("\n5. üìù Snippets dispon√≠veis no VS Code:");
console.log("- eprobe-function: Cria nova fun√ß√£o com padr√£o eProbe");
console.log("- eprobe-var: Declara vari√°vel seguindo padr√£o seguro");
console.log("- eprobe-namespace-add: Template para adicionar ao namespace");
console.log("- eprobe-check-function: Verifica se fun√ß√£o existe");
console.log("- eprobe-debug: Template de debug com emojis");
console.log("- eprobe-test: Cria fun√ß√£o de teste completa");

console.log("\nüéâ CONFIGURA√á√ÉO AUTO IMPORT CONCLU√çDA!");
console.log("üí° Agora no VS Code voc√™ ter√°:");
console.log("- ‚úÖ Detec√ß√£o autom√°tica de ReferenceError");
console.log("- ‚úÖ Autocomplete das fun√ß√µes do namespace");
console.log("- ‚úÖ Snippets personalizados para eProbe");
console.log("- ‚úÖ Highlights de TODO para namespace");
console.log("- ‚úÖ Tasks para verificar namespace");
