// ============================================================================
// üöÄ TESTE VERIFICA√á√ÉO - FUN√á√ïES EM ESCOPO INCORRETO
// ============================================================================
// Objetivo: Verificar se as fun√ß√µes est√£o acess√≠veis via namespace
// Usar: Cole este c√≥digo no console do navegador em uma p√°gina do eProc
// ============================================================================

console.log("üîç TESTE: Verificando fun√ß√µes no namespace...");

const funcoesParaTestar = [
    "autoExtractText",
    "copyToClipboard",
    "sendToPerplexity",
    "isValidPageForButton",
    "findDocumentosRelevantes",
    "testApiKey",
    "debugApiCall",
    "showDocumentSelectionModal",
    "showSentenceProcessingOptions",
    "getStoredApiKey",
    "storeApiKey",
    "removeStoredApiKey",
    "showErrorLogs",
    "showApiQuotaInfo",
    "cleanInvisibleChars",
    "debugEventStructure",
    "detectarDataSessaoExperimental",
    "criarBotaoEleganteeProc",
    "botaoBrancoCapaProcesso",
    "criarInfraButtonPrimary",
    "botaoAzuleProc",
    "detectarPaginaLocalizadores",
    "processarTabelaLocalizadores",
    "destacarLocalizadoresUrgentes",
    "debugButtonCreation",
    "forceCreateButton",
    "ensureButtonExists",
    "shouldShowIntegratedButton",
    "shouldShowFloatingButton",
];

// 1. Verificar se o namespace existe
if (typeof window.SENT1_AUTO === "undefined") {
    console.log("‚ùå ERRO: Namespace window.SENT1_AUTO n√£o encontrado");
    return;
} else {
    console.log("‚úÖ Namespace window.SENT1_AUTO encontrado");
}

// 2. Verificar cada fun√ß√£o
const resultados = {
    encontradas: [],
    faltando: [],
    total: funcoesParaTestar.length,
};

funcoesParaTestar.forEach((nomeFuncao) => {
    if (typeof window.SENT1_AUTO[nomeFuncao] === "function") {
        resultados.encontradas.push(nomeFuncao);
        console.log(`   ‚úÖ ${nomeFuncao}: function`);
    } else {
        resultados.faltando.push(nomeFuncao);
        console.log(
            `   ‚ùå ${nomeFuncao}: ${
                typeof window.SENT1_AUTO[nomeFuncao] || "undefined"
            }`
        );
    }
});

// 3. Resumo dos resultados
console.log("üìä RESUMO DOS RESULTADOS:");
console.log(
    `   ‚úÖ Encontradas: ${resultados.encontradas.length}/${resultados.total}`
);
console.log(
    `   ‚ùå Faltando: ${resultados.faltando.length}/${resultados.total}`
);

if (resultados.faltando.length > 0) {
    console.log("‚ùå FUN√á√ïES FALTANDO:");
    resultados.faltando.forEach((func) => console.log(`     ‚Ä¢ ${func}`));
}

if (resultados.encontradas.length > 0) {
    console.log("‚úÖ FUN√á√ïES ENCONTRADAS:");
    resultados.encontradas
        .slice(0, 5)
        .forEach((func) => console.log(`     ‚Ä¢ ${func}`));
    if (resultados.encontradas.length > 5) {
        console.log(
            `     ... e mais ${resultados.encontradas.length - 5} fun√ß√µes`
        );
    }
}

// 4. Teste espec√≠fico das fun√ß√µes principais j√° movidas
console.log("üß™ TESTE ESPEC√çFICO - FUN√á√ïES PRINCIPAIS:");

// Testar autoExtractText
if (typeof window.SENT1_AUTO.autoExtractText === "function") {
    console.log("   ‚úÖ autoExtractText: Dispon√≠vel e callable");
} else {
    console.log("   ‚ùå autoExtractText: N√£o dispon√≠vel");
}

// Testar copyToClipboard
if (typeof window.SENT1_AUTO.copyToClipboard === "function") {
    console.log("   ‚úÖ copyToClipboard: Dispon√≠vel e callable");
} else {
    console.log("   ‚ùå copyToClipboard: N√£o dispon√≠vel");
}

// Testar testApiKey
if (typeof window.SENT1_AUTO.testApiKey === "function") {
    console.log("   ‚úÖ testApiKey: Dispon√≠vel e callable");
} else {
    console.log("   ‚ùå testApiKey: N√£o dispon√≠vel");
}

// Testar debugApiCall
if (typeof window.SENT1_AUTO.debugApiCall === "function") {
    console.log("   ‚úÖ debugApiCall: Dispon√≠vel e callable");
} else {
    console.log("   ‚ùå debugApiCall: N√£o dispon√≠vel");
}

console.log("üéØ TESTE CONCLU√çDO");
console.log(
    `üìå STATUS: ${resultados.encontradas.length}/${resultados.total} fun√ß√µes dispon√≠veis`
);

// Retornar resultados para usar programaticamente
return resultados;
