// =============================================================================
// üéØ TESTE FINAL ITERATIVO - VALIDA√á√ÉO COMPLETA DO SISTEMA eProbe
// =============================================================================
//
// Este √© o teste final que valida todas as melhorias implementadas:
// ‚úÖ Diagn√≥stico completo
// ‚úÖ Corre√ß√£o autom√°tica
// ‚úÖ Fun√ß√µes de reaplica√ß√£o de √≠cones
// ‚úÖ Verifica√ß√£o robusta de bot√µes
// ‚úÖ Sistema de inicializa√ß√£o
//
// EXECUTE AP√ìS CARREGAR UMA P√ÅGINA DO ePROC
// =============================================================================

console.clear();
console.log("üéØ TESTE FINAL ITERATIVO - Sistema eProbe v2.0");
console.log("=".repeat(60));
console.log("‚è∞ Timestamp:", new Date().toLocaleString("pt-BR"));
console.log("üåê URL:", window.location.href);

async function testeCompleto() {
    console.log("\nüîÑ INICIANDO TESTE COMPLETO...\n");

    // FASE 1: Verificar disponibilidade das fun√ß√µes
    console.log("üì¶ FASE 1: Verificando namespace e fun√ß√µes");
    console.log("-".repeat(40));

    const funcoesCriticas = [
        "diagnosticarCompleto",
        "corrigirProblemas",
        "forcarReaplicacaoIcones",
        "inicializarSubstituicaoIcones",
        "diagnosticarIconesCSS",
        "statusModoUltraPerformance",
        "ensureButtonExists",
    ];

    let funcoesDisponiveis = 0;
    funcoesCriticas.forEach((funcao) => {
        const disponivel = typeof window.SENT1_AUTO?.[funcao] === "function";
        const status = disponivel ? "‚úÖ" : "‚ùå";
        console.log(
            `${status} ${funcao}: ${disponivel ? "DISPON√çVEL" : "INDISPON√çVEL"}`
        );
        if (disponivel) funcoesDisponiveis++;
    });

    const percentualDisponibilidade = (
        (funcoesDisponiveis / funcoesCriticas.length) *
        100
    ).toFixed(1);
    console.log(
        `\nüìä Disponibilidade: ${funcoesDisponiveis}/${funcoesCriticas.length} (${percentualDisponibilidade}%)`
    );

    if (funcoesDisponiveis < funcoesCriticas.length) {
        console.log("‚ùå FALHA: Nem todas as fun√ß√µes est√£o dispon√≠veis");
        return false;
    }

    // FASE 2: Verificar modo ultra-performance
    console.log("\nüî• FASE 2: Verificando modo ultra-performance");
    console.log("-".repeat(40));

    const modoUltraAtivo = window.SENT1_AUTO.statusModoUltraPerformance();
    console.log(
        `Modo ultra-performance: ${modoUltraAtivo ? "üî¥ ATIVO" : "üü¢ INATIVO"}`
    );

    if (modoUltraAtivo) {
        console.log("‚ö†Ô∏è Desativando modo ultra-performance para testes...");
        window.SENT1_AUTO.desativarModoUltraPerformance();
    }

    // FASE 3: Executar diagn√≥stico completo
    console.log("\nüîç FASE 3: Executando diagn√≥stico completo");
    console.log("-".repeat(40));

    let diagnostico;
    try {
        diagnostico = window.SENT1_AUTO.diagnosticarCompleto();
        console.log("‚úÖ Diagn√≥stico executado com sucesso");

        // Analisar resultados do diagn√≥stico
        console.log("\nüìã Resultados do diagn√≥stico:");
        console.log(
            `   üìÖ Data da sess√£o: ${
                diagnostico.funcionalidades.dataSessao.detectada ? "‚úÖ" : "‚ùå"
            }`
        );
        console.log(
            `   üîò Bot√£o resumir: ${
                diagnostico.funcionalidades.botaoResumir.existe ? "‚úÖ" : "‚ùå"
            } (ID: ${diagnostico.funcionalidades.botaoResumir.id || "nenhum"})`
        );
        console.log(
            `   üé® √çcones substitu√≠dos: ${
                diagnostico.funcionalidades.substituicaoIcones.aplicada
                    ? "‚úÖ"
                    : "‚ùå"
            } (${
                diagnostico.funcionalidades.substituicaoIcones.quantidade
            } elementos)`
        );
        console.log(
            `   üé® Sistema de temas: ${
                diagnostico.funcionalidades.sistemaTheme.aplicado ? "‚úÖ" : "‚ùå"
            }`
        );
    } catch (error) {
        console.error("‚ùå Erro no diagn√≥stico:", error);
        return false;
    }

    // FASE 4: Executar diagn√≥stico espec√≠fico de √≠cones CSS
    console.log("\nüé® FASE 4: Diagn√≥stico espec√≠fico de √≠cones");
    console.log("-".repeat(40));

    try {
        const diagnosticoIcones = window.SENT1_AUTO.diagnosticarIconesCSS();
        console.log("‚úÖ Diagn√≥stico de √≠cones executado");

        console.log(
            `   üñºÔ∏è √çcones GIF encontrados: ${diagnosticoIcones.iconesGIF}`
        );
        console.log(
            `   üéØ √çcones SVG encontrados: ${diagnosticoIcones.iconesSVG}`
        );
        console.log(
            `   ‚úÖ √çcones substitu√≠dos: ${diagnosticoIcones.iconesSubstituidos}`
        );
        console.log(`   ‚ö†Ô∏è Problemas: ${diagnosticoIcones.problemas.length}`);

        if (diagnosticoIcones.problemas.length > 0) {
            console.log("   üìù Problemas detectados:");
            diagnosticoIcones.problemas.forEach((problema) =>
                console.log(`      ‚Ä¢ ${problema}`)
            );
        }
    } catch (error) {
        console.error("‚ùå Erro no diagn√≥stico de √≠cones:", error);
    }

    // FASE 5: Executar corre√ß√£o autom√°tica
    console.log("\nüîß FASE 5: Executando corre√ß√£o autom√°tica");
    console.log("-".repeat(40));

    try {
        const resultadoCorrecao = window.SENT1_AUTO.corrigirProblemas();
        console.log("‚úÖ Corre√ß√£o autom√°tica executada");

        if (resultadoCorrecao.acoes.length > 0) {
            console.log("   üìù A√ß√µes executadas:");
            resultadoCorrecao.acoes.forEach((acao) => {
                const status = acao.sucesso
                    ? "‚úÖ"
                    : acao.status === "Erro"
                    ? "‚ùå"
                    : "‚ö†Ô∏è";
                console.log(`      ${status} ${acao.acao}: ${acao.status}`);
            });
        } else {
            console.log("   ‚ÑπÔ∏è Nenhuma corre√ß√£o necess√°ria");
        }
    } catch (error) {
        console.error("‚ùå Erro na corre√ß√£o:", error);
    }

    // FASE 6: For√ßar reaplica√ß√£o de √≠cones se necess√°rio
    console.log("\nüîÑ FASE 6: Testando reaplica√ß√£o de √≠cones");
    console.log("-".repeat(40));

    const fieldsetAcoes = document.querySelector("#fldAcoes.infraFieldset");
    if (fieldsetAcoes) {
        const iconesGIF = fieldsetAcoes.querySelectorAll('img[src*=".gif"]');
        const iconesSVG = fieldsetAcoes.querySelectorAll("svg.lucide");

        console.log(
            `   üìä Estado atual: ${iconesGIF.length} GIF, ${iconesSVG.length} SVG`
        );

        if (iconesGIF.length > 0) {
            console.log("   üîÑ Executando reaplica√ß√£o for√ßada...");
            try {
                const resultadoReaplicacao =
                    window.SENT1_AUTO.forcarReaplicacaoIcones();
                console.log(
                    "   ‚úÖ Reaplica√ß√£o executada:",
                    resultadoReaplicacao
                );
            } catch (error) {
                console.error("   ‚ùå Erro na reaplica√ß√£o:", error);
            }
        } else {
            console.log("   ‚úÖ √çcones j√° aplicados corretamente");
        }
    } else {
        console.log(
            "   ‚ÑπÔ∏è Fieldset de a√ß√µes n√£o encontrado (normal em algumas p√°ginas)"
        );
    }

    // FASE 7: Aguardar e verificar resultados finais
    console.log("\n‚è≥ FASE 7: Aguardando e verificando resultados finais...");
    console.log("-".repeat(40));

    return new Promise((resolve) => {
        setTimeout(() => {
            console.log("üéØ VERIFICA√á√ÉO FINAL:");

            // Verificar bot√£o final
            const botaoFinal =
                document.getElementById("eprobe-btn") ||
                document.getElementById("documento-relevante-auto-button") ||
                document.getElementById("sent1-auto-button");
            console.log(
                `   üîò Bot√£o presente: ${botaoFinal ? "‚úÖ SIM" : "‚ùå N√ÉO"} ${
                    botaoFinal ? `(ID: ${botaoFinal.id})` : ""
                }`
            );

            // Verificar √≠cones final
            const iconesSubstituidosFinal = document.querySelectorAll(
                "[data-eprobe-icon-replaced]"
            ).length;
            console.log(
                `   üé® √çcones substitu√≠dos: ${iconesSubstituidosFinal} elementos`
            );

            // Verificar namespace final
            const namespaceFinal =
                typeof window.SENT1_AUTO === "object" &&
                Object.keys(window.SENT1_AUTO).length > 0;
            console.log(
                `   üì¶ Namespace: ${
                    namespaceFinal ? "‚úÖ FUNCIONANDO" : "‚ùå PROBLEMA"
                }`
            );

            // Calcular score final
            let pontuacao = 0;
            if (botaoFinal) pontuacao += 25;
            if (iconesSubstituidosFinal > 0) pontuacao += 25;
            if (namespaceFinal) pontuacao += 25;
            if (funcoesDisponiveis === funcoesCriticas.length) pontuacao += 25;

            console.log(`\nüèÜ PONTUA√á√ÉO FINAL: ${pontuacao}/100`);

            if (pontuacao >= 90) {
                console.log("üéâ EXCELENTE: Sistema funcionando perfeitamente!");
            } else if (pontuacao >= 70) {
                console.log(
                    "‚úÖ BOM: Sistema funcionando com pequenos problemas"
                );
            } else if (pontuacao >= 50) {
                console.log("‚ö†Ô∏è REGULAR: Sistema funcionando parcialmente");
            } else {
                console.log("‚ùå CR√çTICO: Sistema com problemas graves");
            }

            resolve(pontuacao >= 70);
        }, 2000);
    });
}

// Executar teste
testeCompleto().then((sucesso) => {
    console.log("\n" + "=".repeat(60));
    console.log(`üéØ TESTE FINAL: ${sucesso ? "APROVADO ‚úÖ" : "REPROVADO ‚ùå"}`);
    console.log("=".repeat(60));
});

console.log("\n‚è≥ Executando teste completo... aguarde os resultados...");
